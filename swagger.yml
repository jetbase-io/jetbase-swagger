swagger: '2.0'
info:
  version: '1.0.0'
  title: 'JetBase REST API'
  description: 'Document describes REST API for JetBase backends/frontends.'
  termsOfService: 'mvpngn.com/terms'
  contact:
    email: 'alex.padalka@mvpngn.com'
  license:
    name: 'MIT'
    url: 'https://opensource.org/licenses/MIT'
host: ''
basePath: '/api/v1'
produces:
  - 'application/json'
consumes:
  - 'application/json'
tags:
  - name: 'auth'
    description: 'Operations about security and auth'
  - name: 'user'
    description: 'Operations about user'
securityDefinitions:
  JWT:
    description: 'JWT auth'
    type: 'apiKey'
    name: 'Authorization'
    in: 'header'
security:
  - JWT: []
schemes:
  - 'https'
paths:
  /login:
    post:
      tags:
        - 'auth'
      summary: 'Logs user into the system'
      description: ''
      operationId: 'loginUser'
      security: []
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: "The user's email for login"
              password:
                type: string
                format: password
                description: 'The password for login in clear text'
            required:
              - email
              - password
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              token:
                type: string
              rate_limit:
                type: integer
                description: 'calls per hour allowed by the user'
                example: 3600
              expires_after:
                type: string
                format: date-time
                description: 'date in UTC when token expires'
        '400':
          description: Invalid email/password supplied
          schema:
            $ref: '#/definitions/ErrorResponse'

  /logout:
    delete:
      tags:
        - 'auth'
      summary: 'Logs out current logged in user session'
      description: ''
      operationId: 'logoutUser'
      produces:
        - 'application/json'
      parameters: []
      responses:
        default:
          description: 'successful operation'
  /users:
    get:
      summary: Get registered users.
      description: |
        This endpoint is for user to search registered users, support for filtering results.<br>
        Notice, by now this operation is only for administrator.<br>
        Pagination: only if `limit` param passed, otherwise returns all users
      parameters:
        - name: email
          in: query
          type: string
          required: false
          description: Email or part of email for filtering results.
        - name: limit
          in: query
          type: integer
          format: int32
          required: false
          description: The count of users per page, default unlimited
        - name: offset
          in: query
          type: integer
          format: int32
          required: false
          description: The count of skip users, default is 0
      tags:
        - 'user'
      responses:
        '200':
          description: Searched for users successfully.
          schema:
            type: object
            properties:
              items:
                description: The collection of found users
                type: array
                items:
                  $ref: '#/definitions/UserGet'
              count:
                type: integer
                description: The count of found users
                example: 1
        '401':
          description: User need to log in first.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: User does not have permission of admin role.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Unexpected internal errors.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - 'user'
      summary: 'Create user'
      description: 'This can only be done by the logged in user.'
      operationId: 'createUser'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Created user object'
          required: true
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        '200':
          description: 'user successfully created'
          schema:
            type: object
            properties:
              id:
                type: integer
                description: Id of created user
                example: 1
        '400':
          description: Bad Request (Email already exists. Empty required fields. Min length error. Password does not match with password confirmation.)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: User needs to log in first.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: User does not have permission of admin role.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Unexpected internal errors.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /users/current:
    get:
      summary: Get current user info.
      description: |
        This endpoint is to get the current user infomation.
      tags:
        - 'user'
      responses:
        '200':
          description: Get current user information successfully.
          schema:
            $ref: '#/definitions/UserGet'
        '401':
          description: User need to log in first.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /users/{user_id}:
    get:
      tags:
        - 'user'
      summary: 'Get user by id'
      description: 'This operation is only for administrator.'
      operationId: 'getUserById'
      produces:
        - 'application/json'
      parameters:
        - name: 'user_id'
          in: 'path'
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: 'integer'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UserGet'
        '401':
          description: User needs to log in first.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: User does not have permission of admin role.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: User not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Unexpected internal errors.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - 'user'
      summary: 'Updated user'
      description: 'This can only be done by the logged in user. If passed role_id, only admin can change role, otherwise this field will be ignored'
      operationId: 'updateUser'
      produces:
        - 'application/json'
      parameters:
        - name: 'user_id'
          in: 'path'
          description: 'user id which need to be updated'
          required: true
          type: 'integer'
        - in: 'body'
          name: 'body'
          description: 'Updated user object'
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        '200':
          description: Updated user successfully.
        '400':
          description: Bad Request (Invalid user supplied. Email already exists. Invalid email type. Invalid min length)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: User needs to log in first.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: User does not have permission of admin role.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: User not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Unexpected internal errors.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - 'user'
      summary: 'Delete user'
      description: 'This operation is only for administrator.'
      operationId: 'deleteUser'
      produces:
        - 'application/json'
      parameters:
        - name: 'user_id'
          in: 'path'
          description: 'User id that needs to be deleted'
          required: true
          type: 'integer'
      responses:
        '200':
          description: User successfully deleted.
        '401':
          description: User needs to log in first.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: User does not have permission of admin role.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: User not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Unexpected internal errors.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /users/{user_id}/password:
    put:
      summary: Change the password on a user that already exists.
      description: |
        This endpoint is for user to update password. Users with the admin role can change any user's password. Guest users can change only their own password.
      parameters:
        - name: user_id
          in: path
          type: integer
          format: int
          required: true
          description: Registered user ID.
        - in: body
          name: body
          description: Password to be updated, the attribute 'old_password' is optional when the API is called by the system administrator.
          required: true
          schema:
            $ref: '#/definitions/Password'
      tags:
        - 'user'
      responses:
        '200':
          description: Updated password successfully.
        '400':
          description: Bad Request (Invalid user ID; Old password is blank; New password is blank. Invalid min length password)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Don't have authority to change password. Please check login status.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: User does not have permission of admin role. / Old password does not a match with your password
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Unexpected internal errors.
          schema:
            $ref: '#/definitions/ErrorResponse'
definitions:
  UserCreate:
    type: 'object'
    properties:
      first_name:
        type: 'string'
      last_name:
        type: 'string'
      email:
        type: 'string'
        format: email
      password:
        type: 'string'
      password_confirmation:
        type: 'string'
      role_id:
        type: 'integer'
        format: 'int32'
    required:
      - first_name
      - last_name
      - email
      - password
      - password_confirmation
  ErrorResponse:
    type: 'object'
    properties:
      message:
        type: 'string'
  UserUpdate:
    type: 'object'
    properties:
      first_name:
        type: 'string'
      last_name:
        type: 'string'
      email:
        type: 'string'
        format: email
      role_id:
        type: 'integer'
        format: 'int32'
  UserGet:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int32'
        example: 1
      first_name:
        type: 'string'
      last_name:
        type: 'string'
      email:
        type: 'string'
        format: email
      role_id:
        type: 'integer'
        format: 'int32'
  Role:
    type: 'object'
    properties:
      role_id:
        type: 'integer'
        format: 'int32'
      name:
        type: 'string'
  Password:
    type: 'object'
    properties:
      old_password:
        type: 'string'
        description: The user's current password.
      new_password:
        type: 'string'
        description: New password for marking as to be updated.
externalDocs:
  description: 'Find out more about JetBase'
  url: 'https://jetbase.io'
